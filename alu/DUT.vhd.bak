-- A DUT entity is used to wrap your design.
--  This example shows how you can do this for the
--  Adder_Subtractor.
library ieee;
use ieee.std_logic_1164.all;
entity DUT is
   port(input_vector: in std_logic_vector(9 downto 0);
       	output_vector: out std_logic_vector(7 downto 0));
end entity;
architecture DutWrap of DUT is
   component alu is
     port(A3, A2, A1, A0, B3, B2, B1, B0, M: in std_logic;
         	Cout, S3, S2, S1, S0: out std_logic);
   end component;
begin
   -- input/output vector element ordering is critical,
   -- and must match the ordering in the trace file!
   add_instance: alu 
			port map (
					
					s(0) => input_vector(8),
					s(1) => input_vector(7),
					A(0) => input_vector(6),
					A(1) => input_vector(5),
					A(2) => input_vector(4),
					A(3) => input_vector(3),
					B(0) => input_vector(2),
					B(1) => input_vector(1),
					B(2) => input_vector(0),
					B(3) => input_vector(9);
              
					Y(0) => output_vector(4),
					Y(1) => output_vector(3),
					Y(2) => output_vector(2),
					Y(3) => output_vector(1),
					Y(4) => output_vector(0),
					Y(5) => output_vector(0),
					Y(6) => output_vector(0),
					Y(7) => output_vector(0));

end DutWrap;

